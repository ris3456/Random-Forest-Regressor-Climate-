# -*- coding: utf-8 -*-
"""MODEL_RFR.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qUKheAjMxwGKCpdrLt9_6wnYz3WkAx2P
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
df=pd.read_csv('/content/Final_mauna - Final_data_CSV.csv',parse_dates=True,index_col=0)
df=pd.DataFrame(df)
x=np.array(df['co2_conc'])

ar=[]
ar.append(0)
for i in range(0,len(x)-1):
  ar.append(x[i+1]-x[i])

df['change_in_co2']=ar;
print(df)
#x=df.iloc[:, :-1].values
y=np.array(df['OLR'])

#y=df.iloc[:,2].values
x=df.drop('OLR',axis=1)
feature_list=list(x.columns)
x=np.array(x)

from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,train_size=0.8,test_size=0.2)
from sklearn.ensemble import RandomForestRegressor
model = RandomForestRegressor(n_estimators=150,random_state=42)

model.fit(x_train,y_train)
prediction=model.predict(x_test)
errors = abs(prediction - y_test)# Print out the mean absolute error (mae)
print('Mean Absolute Error:', round(np.mean(errors),2))
mape = 100 * (errors / y_test)# Calculate and display accuracy
accuracy = 100 - np.mean(mape)
print('Accuracy:', round(accuracy, 2), '%.')

plt.scatter(y_test,prediction)
plt.xlabel("Test Values")
plt.ylabel("Predicted Values")
plt.show()

# Import tools needed for visualization
from sklearn.tree import export_graphviz
import pydot# Pull out one tree from the forest
tree = model.estimators_[5]# Import tools needed for visualization
from sklearn.tree import export_graphviz
import pydot# Pull out one tree from the forest
tree = model.estimators_[5]# Export the image to a dot file
export_graphviz(tree, out_file = 'tree.dot', feature_names = feature_list, rounded = True, precision = 1)# Use dot file to create a graph
(graph, ) = pydot.graph_from_dot_file('tree.dot')
# Write graph to a png file
graph.write_png('tree.png')

importances = list(model.feature_importances_)# List of tuples with variable and importance
feature_importances = [(feature, round(importance, 2)) for feature, importance in zip(feature_list, importances)]# Sort the feature importances by most important first
feature_importances = sorted(feature_importances, key = lambda x: x[1], reverse = True)# Print out the feature and importances 
[print('Variable: {:20} Importance: {}'.format(*pair)) for pair in feature_importances];


import matplotlib.pyplot as plt
 %matplotlib inline 
#Set the style
plt.style.use('fivethirtyeight')# list of x locations for plotting
x_values = list(range(len(importances)))# Make a bar chart
plt.bar(x_values, importances, orientation = 'vertical')# Tick labels for x axis
plt.xticks(x_values, feature_list, rotation='vertical')# Axis labels and title
plt.ylabel('Importance'); plt.xlabel('Variable'); plt.title('Variable Importances');